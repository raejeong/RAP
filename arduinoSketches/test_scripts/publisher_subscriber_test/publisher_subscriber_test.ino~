/*
 * Test for both publisher and subscriber in a same node
 */

#include <ros.h>
#include <sensor_msgs/JointState.h>
#include <std_msgs/Float32.h>

ros::NodeHandle nh;

sensor_msgs::JointState joint_state_msg;

float position;

void positionCb( const std_msgs::Float32& position_msg) {
  position = position_msg.data;
}


ros::Publisher joint_state_publisher("joint_state", &joint_state_msg);
ros::Subscriber<std_msgs::Float32> position_listener("position", &positionCb );


void setup()
{
  nh.initNode();
  nh.advertise(joint_state_publisher);
  nh.subscribe(position_listener);
  joint_state_msg.position_length = 1;
  position  = 3.0;
}

void loop()
{
  joint_state_msg.position[0] = position;
  joint_state_publisher.publish( &joint_state_msg );
  nh.spinOnce();
  delay(1000);
}